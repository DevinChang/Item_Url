今日工作重点：
1.运行MediaMonitor这个项目。
2.阅读并学习项目中的源代码。

DECLARE_MESSAGE_MAP 作用是向类中添加消息映射必要的结构体和函数声明。

SetUnhandledExceptionFilter 使应用程序以取代一个过程的每一线程的顶层异常处理程序。

AfxEnableControlContainer  调用此函数的应用程序对象的InitInstance函数来实现对OLE控件包容支持。



初步略读过此项目的源代码后，有相当一大部分看不懂。项目用到MFC，所以涉及各种MFC类。
读过源码发现此项目是用来监测视屏流，具体细节不知所云。


	 
AN (Analysis) 需求分析
BD (Base Design) 基本设计
FD (Functional Design) 结构设计
DD (Detail Design) 详细设计
UT (Unit Testing) 单元测试
CT (Component Testing) 组件测试
TT (Technical Testing) 技术测试
IT (Integration Testing) 集成测试
ST (System Testing) 系统测试
UAT (User Acceptance Testing) 验收测试
OP (Operation) 发布	 


Hook : 钩子，Windows用来替换DOS下“中断“的系统机制。具体的说就是，给一个函数”挂“一个钩子，
它执行前先执行我们的函数，从而达到拦截时间和函数调用的目的。
Hook有IAT钩子（Import Address Table)导入地址表。


Webbrowser
c++ 中^是异或操作符，例如a = 5 = 0101, b = 4 = 0100, x = a ^ b = 0011 = 3
异或是二进制运算，相同位为0，不同位为1。
性质：任何与0异或的数即为本身。
用处：
1.交换两个数
int a, b; 
a = a ^ b;
b = a ^ b = a ^ b ^ b = a ^ 0 = a;
a = a ^ b = a ^ a ^ b = 0 ^ b = b;
2.找出几个数中不同的数，因为相同的数异或为0，利用这个性质，让两两异或，最后可得结果。
在.NET框架下，^声明了一个有GC管理的指针，表示所使用的类型是托管类型。使用方法和指针差不多。
~操作符
第一个是用来析构对象。
第二个是取反操作。例如 a = 5 = 0101, ~a = 1010;

MFC  ----Webbrowser
1.windows下消息机制
标准windows消息.除了VM_COMMAND外，以VM_开头的消息都是标准windows消息。
命令消息：VM_COMMAND,消息附带了标识ID来区分来自哪个菜单，工具，按钮等的消息。
通知消息：一般由子窗口发送给父窗口的消息。消息名也为VM_COMMAND,消息中附带了控件标识码来区分
来自哪个控件。
2.消息映射表
除了一些没有基类的类和CObject派生类外，所有类都可自动生成消息映射表。
BEGIN_MESSAGE_MAP() 与 END_MESSAGE_MAP()之间的内容称为消息映射入口项。除此之外还会在源文件.h
里调用宏：DECLARE_MESSAGE_MAP()
消息映射的格式为：
BEGIN_MESSAGE_MAP(Ctmp_webApp, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()
ID_HELP为消息，CWinApp::OnHelp为消息处理函数。
3.特殊的消息处理函数
在操作列表框等的文件时，子窗口需要给父窗口发送WM_NOTIFY消息。
WM_NOTIFY(wParam, lParam)wParam是发送通知消息控件的id号，lParam指向一个结构体，可以为
NMHDR结构体，也可为第一个参数为NMHDR结构体变量的其他结构体。
Typedef struct tagNMHDR
{
	HWND hwndFrom;
	UINT idFrom;
	UINT code;
}NMHDR;
hwndFrom为发送通知消息控件的句柄，idFrom为控件ID，code为要处理通知消息的通知码
ON_NOTIFY(wNotifyCode,id,memberFxn)
wNotifyCode为要处理的通知消息通知码，例如：NM_CLICK。id为控件标识ID。MemberFxn为此消息的处理函数。
通知消息的处理函数的原型为：
fx_msg void memberFxn( NMHDR * pNotifyStruct, LRESULT * result);

ActiveX 控件
是Microsoft对于一系列策略性面向对象程序技术工具的称呼，主要技术为COM。

0x39A7F8  0011 1001 1010 0111 1111 1000
1100 1001 0111 1011 0xC97B
0xD5E4C   1101 0101 1110 1100
10 0110 1110 0111 1011 0101 0x26E7B5
x = 2^n,对于非负整数n次幂，对于x写成二进制，只需要在1后面添加n个0即可。当n表示为
n = i + 4j的形式，其中0 <= i <= 3,将x改写成十六进制开头为1(i = 0),2(i = 1),4(i = 2),8(i = 3)
例如：x = 2048 = 2^11, x = 11 = 3 + 4 * 2; 故写成十六进制为0x800

0010 0000 0000
0110 0000 0000   524288 0x80000  

公司业务 检测网页
吞吐量：指对网络，设备，端口等其他设施，单位时间内成功传送数据的数量。
防火墙的吞吐量是指在没有丢帧的情况下，设备能够接受并转发的最大数据率。
与带宽的区别，带宽是指链路上每秒所能传送的比特数，它取决于链路时钟频率和信道编码在计算机网络中
又称为线速。链路上的可用带宽（带宽） 实际链路中每秒所能传送的比特数（吞吐量）
ICMP 网络控制消息协议，用于在TCP/IP网络中发送控制消息，提供可能发生在通信环境中的各种问题
反馈。通常用于返回错误信息或分析路由。
IDC 机房，属于公司内部的服务器。检测用IDC。
LastMile 网民，用户网络，每检测一次需要支出费用，不用与检测。
网络参数：每个任务有主任务和子任务之分，主任务执行浏览，传输，流媒体等任务时，子任务可以根据是否
勾选这个参数来执行是否对网络环境进行检测，如ping主机，DNS解析，路由解析等。
Http报文格式
一个Http报文由请求行，请求头，空行，请求数据四部分组成。
请求行：由请求方法, URL, Http协议版本三部分组成，中间用空格隔开，如：GET nba.hupu.com Http/1.1
请求方法主要有GET,POST,HEAD,PUSH,DELETE,OPTIONS,TACE,CONNECTION.
请求头部：由关键字/（键值对）组成。常见的有：User-Agent: 产生的浏览器类型
Accept: 客户端可识别的内容类型列表。
Host: 请求的主机名，允许多个域名同处一个IP地址，即虚拟地址。
请求数据： 请求数据不在GET中使用，主要用于POST。POST方法是用与填写客户表单场合的情况。与请求数据
相关的常用请求头是Content-Type Content-Length


\"\\Microsoft\\Windows\\TextServicesFramework\\MsCtfMonitor\"

schtasks /run /tn "\Microsoft\Windows\TextServicesFramework\MsCtfMonitor"

union使用
union的使用与struct有相似的地方，但本质上却大大不同。他们都有成员，访问权限都是公有的。从内存上说
struct为每个成员分配内存，而union则是每个成员都共享一块内存，故所共享的内存取决于最大的成员。例如：
struct student
{
	char a;
	long b;
	float c;
}
sizeof(student) = 12;
union num
{
	char a;
	long b;
	float c;
}
sizeof(num) = 4;
在union的内存可以用来存放不同类型的变量，但在每一时刻智能存在一种，也就是说，每个时刻只有一种类型的变量
起作用。当新成员变量被赋值之后，原先的变量就是去作用。
在c++用union时要注意：
union里面的东西共享内存，所以不能定义静态、引用类型的变量。由于在union里也不允许存放带有构造函数、析构函
数和复制构造函数等的类的对象，但是可以存放对应的类对象指针。编译器无法保证类的构造函数和析构函数得到正确
的调用，由此，就可能出现内存泄漏。

进阶之路：
计算机数学：离散数学与具体数学。

算法分析设计：常用设计技巧和数据结构。

系统平台：体系结构、操作系统、网络、编译原理和数据库。

代码设计：架构设计、设计模式、方法论。

代码实现：开发工具和主流编程语言。

测试验证：单元测试、性能测试和优化。



ActiveX

Com组件
com组件基本的接口IUnknown，IClassFactory, IDispatch.
class IUnknown
{
	HRESULT QueryInterface([in]REFIID iid, [out]void ** ppv);
	ULONG AddRef(void);
	ULONG Release(void);
};
QueryInterface功能是接口查询，AddRef和Release用引用技术来控制生命周期。com组件的每个接口都要继承自IUnknown.
class IClassFactory :　public IUnknown
{
	virtual HRESULT _stdcall CreateInstance(IUnknown *pUnknownOuter, const IID &iid, void **ppv) = 0;
	virtual HRESULT _stdcall LockServer(BOOL bLock) = 0;
}	
com库通过类场创建com对象。CreateInstance负责创建com对象，LockServer负责控制生命周期。
类场此函数创建：HRESULT DllGetClassObject(const CLSID &clsid, const IID &iid, (void **)ppv);
com库与类场的交互
1)若创建远程对象或希望一次获取对象的多个接口指针，选用CoCreateInstanceEx。
HRESULT CoCreateInstanceEx(const CLSID &clsid,
					IUnknown *pIUnknownOuter,
					DWORD dwClsContext,
					CONSERVERINFO *pServerInfo,
					DWORD dwCount,
					MULTI_QI *rgMultiQI
);
2）若希望获取类厂对象或要调用类厂的某些成员函数，选用CoGetClassObject，通常IIDIID_IclassFactory，进程内组件直接调用DLL的CoGetClassObject，若CoGetClassObject创建的类厂对象位于进程外组件，函数启动组件进程，然后等待，直到组件进程把它支持的COM类对象的类厂注册到COM中，返回类厂信息。
HRESULT CoGetClassObject(const CLSID &clsid,
					DWORD dwClsContext,
					CONSERVERINFO *pServerInfo,
					const IID &iid,
					(void **)ppv
);
3)其他情况下，选用CoCreateInstance创建对象，CoCreateInstance封装类厂创建对象的过程，返回COM对象的接口指针，不能创建远程机器上的对象。
HRESULT CoCreateInstanceEx(const CLSID &clsid, IUnknown *pIUnknownOuter, DWORD dwClsContext, const IID &iid, void **ppv)
{
	IClassFactory *pCF;
	HRESULT hr;
	hr = CoGetClassObject(clsid, dwClsContext, NULL, IID_ClassFactory, (void *)pCF);
	if (FAILED(hr))
		return hr;
	hr = pCF->CreateInstance(pIUnknownOuter, iid, (void *)ppv);
	pCF->Release();
	return hr;
}


监控逻辑：在视屏流检测中，返回602错误码是TCP连接失败。ERROR_MEDIA_CONNECTION_FAILED
http://www.360buy.com

	//modify
	struct addrinfo hints;
	struct addrinfo *res, *cur;
	struct sockaddr_in *addr;
	char ipaddr[16];
	memset(&hints, 0, sizeof(struct addrinfo));
	hints.ai_family = AF_INET;
	hints.ai_flags = AI_PASSIVE;
	hints.ai_protocol = 0;
	hints.ai_socktype = SOCK_STREAM;

	int ret = getaddrinfo()
	
	struct in_addr in;
	in.s_addr = result.m_dwServerIP;
	inet_ntoa(in);
	
	
	
winsocket 编程错误点：
error LNK2019: 无法解析的外部符号 __imp__inet_addr@4，在windows网络编程中报这个错误，主要是lib没有引入。应当检查是否引入了Ws2_32.lib
Ws2_32.lib对应的是Ws2_32.dll，提供了网络编程的一些API. 解决方法：1，可以在vc中-链接器-输入-附加依赖项中添加。2.动态引入，在程序中加入
#pragma comment (lib, "Ws2_32.lib")

处理业务流程：
1.分析问题，就今天目标IP地址为0这个问题来说。
解决流程就是，看report散点图，发现bug。分析bug是偶然出现还是必然出现。
因为问题是在某个目的主机上才会出现这个问题，所以，先要与目的主机建立联系，在目的主机上测试问题。

